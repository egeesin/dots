#!/bin/bash
# EDTR=$EDITOR
EDTR="nvim"
WEBDEV_DIR="$HOME/webdev"
PXL_DIR="$WEBDEV_DIR/pxl"
SITE_DIR="$WEBDEV_DIR/site-11ty"

COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

# Default values

cmd() { basename "$0"; }
error() {
    echo "$(cmd): [ERROR] $1";
    exit 1;
}
usage(){
echo "\
Usage: $(cmd) <COMMAND>
  open;Loads latest (N)vim or tmuxp session
  build   pxl|icon;
  tree    pxl|11ty;Shows the tree of chosen project.
  export  11ty;
  watch   pxl|11ty;Opens a live session
  push    pxl;Pushes to the Git upstream
  deploy  Deploys the site
  upmod   pxl|11ty;Checks deps, updates if possible
  rmmod;Removes all packages inside node_modules
  edit    cli|session;Edit the binary or vim session
" | column -t -s ";"
}

sub_edit(){
	if [ "$SUB_COMMAND_NAME" = "cli" ]; then
		"$EDTR" "$(command -v "$(cmd)")"
	elif [ "$SUB_COMMAND_NAME" = "session" ]; then
		"$EDTR" "$WEBDEV_DIR"/session.vim
	fi
}
sub_open(){
	if [ "$SUB_COMMAND_NAME" = "session" ]; then
		# "$EDTR" -c ":so $WEBDEV_DIR/session.vim | so \$MYVIMRC"
		tmuxp load ~/.dots/config/tmuxp/webdev-lite.yml
		# tmuxinator webdev
	elif [ "$SUB_COMMAND_NAME" = "" ]; then
		# By default
		# "$EDTR" -c ":so $WEBDEV_DIR/session.vim | so \$MYVIMRC"
		# tmuxinator webdev
		tmuxp load ~/.dots/config/tmuxp/webdev-lite.yml
	fi
}
sub_push(){
	if [ "$SUB_COMMAND_NAME" = "pxl" ]; then
		cd "$PXL_DIR" || exit
		git push
		cd - || exit
	fi
}
sub_deploy(){
	cd "$WEBDEV_DIR/site-11ty" || exit
	pnpm run deploy
	cd - || exit
}
sub_build(){
	if [ "$SUB_COMMAND_NAME" = "pxl" ]; then
		cd "$PXL_DIR" || exit
		gulp build
		cd - || exit
	elif [ "$SUB_COMMAND_NAME" = "11ty" ]; then
		cd "$PXL_DIR" || exit
		gulp build
		cd - || exit
	elif [ "$SUB_COMMAND_NAME" = icon ]; then
		cd "$PXL_DIR" || exit
		gulp icon
		cd - || exit
	elif [ ! "$SUB_COMMAND_NAME" = pxl ] || [ ! "$SUB_COMMAND_NAME" = icon ] ;then
		error "No target selected."
		exit 1
	fi
}
sub_tree(){
	if [ "$SUB_COMMAND_NAME" = pxl ]; then
		# tree "$PXL_DIR" -L 5 -I 'LICENSE|README.md|CONTRIBUTING.md|node_modules|package-lock.json|*.ai|*.psd|reports|dist|template|icon|11ty-build' --dirsfirst --noreport | less
		tree "$PXL_DIR" -L 5 -I 'LICENSE|README.md|CONTRIBUTING.md|node_modules|package-lock.json|*.ai|*.psd|reports|dist|template|icon|11ty-build' --dirsfirst --noreport -C -H file://"$PXL_DIR" -o "$PXL_DIR"/pxl-tree.html
		open "$PXL_DIR"/pxl-tree.html
	elif [ "$SUB_COMMAND_NAME" = 11ty ]; then
		# SITE_DIR="$WEBDEV_DIR/site-11ty"
		# tree "$SITE_DIR" -L 5 -I 'LICENSE|README.md|CONTRIBUTING.md|node_modules|package-lock.json|*.ai|*.psd|dist|grnt' --dirsfirst --noreport | less
		tree "$SITE_DIR" -L 5 -I 'LICENSE|README.md|CONTRIBUTING.md|node_modules|package-lock.json|*.ai|*.psd|dist|grnt' --dirsfirst --noreport -C -H file://"$SITE_DIR" -o "$SITE_DIR"/11ty-tree.html
		open "$SITE_DIR"/11ty-tree.html
	fi
}
sub_export(){
	if [ "$SUB_COMMAND_NAME" = 11ty ]; then
		# SITE_DIR="$WEBDEV_DIR/site-11ty"
		rm -r "${SITE_DIR:?}"/lib/ \
			"${SITE_DIR:?}"/src/\_{data,includes,layouts} \
			"${SITE_DIR:?}"/src/{assets/,app.webmanifest.liquid,feed.json.liquid,robots.txt.liquid,humans.txt.liquid,sitemap.xml.liquid}
		# "${SITE_DIR:?}"/src/{assets/,app.webmanifest.liquid,feed.json.liquid,robots.txt.liquid,humans.txt.liquid,sitemap.xml.liquid,staticman.yml}
		cd "$PXL_DIR" || exit
		gulp clear11ty
		gulp export11ty
		cd "${SITE_DIR:?}" || exit
		pnpm run prebuild
		cd - || exit
		cp -R "$PXL_DIR"/11ty-build/* "$SITE_DIR"
	fi
}
sub_watch(){
	if [ "$SUB_COMMAND_NAME" = pxl ]; then
		cd "$PXL_DIR" || exit
		gulp
		cd - || exit
	elif [ "$SUB_COMMAND_NAME" = 11ty ]; then
		cd "$WEBDEV_DIR/site-11ty" || exit
		pnpm run prebuild
		pnpm run watch
		cd - || exit
	elif [ "$SUB_COMMAND_NAME" = "11ty-debug" ]; then
		cd "$WEBDEV_DIR/site-11ty" || exit
		pnpm run prebuild
		pnpm run debug
		cd - || exit
	fi
}
sub_upmod(){
	if [ "$SUB_COMMAND_NAME" = pxl ]; then
		cd "$PXL_DIR" || exit
		# ncu -u -x <package-name> # Update every package except <package-name>
		pnpm up -i -L # Interactive update to latest
		# pnpm exec browserslist --update-db
		pnpm exec update-browserslist-db
		cd - || exit
	elif [ "$SUB_COMMAND_NAME" = 11ty ]; then
		cd "$WEBDEV_DIR/site-11ty" || exit
		# ncu -u -x node-fetch # Last version supporting CommonJS - (11ty not yet compatible with ESM dependencies)
		pnpm up -i -L # Interactive update to latest
		# Upgrade every package except node-fetch (because of ESM incompatibility)
		cd - || exit
	fi
}
sub_rmmod(){
	echo "Haven't tested yet! Check the command manually before using it."
	# cd "$WEBDEV_DIR" || exit
	# find . -name "node_modules" -exec rm -r "{}" \;
	# cd -
}
# sub_backup(){
# 	rm -rf "$WEBDEV_DIR/{pxl,site-11ty}/{dist,node_modules}"
# }

case $COMMAND_NAME in
	"" | "-h" | "--help")
		usage
		;;
	*)
		shift
		sub_"${COMMAND_NAME}" "$@"
		if [ $? = 127 ]; then
			echo "Error: '$COMMAND_NAME' is not a known subcommand." >&2
			echo "       Run '$(cmd) --help' for a list of known subcommands." >&2
			exit 1
		fi
		;;
esac
