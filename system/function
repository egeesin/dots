#!/bin/zsh
# sourced=0
# if [ -n "$ZSH_EVAL_CONTEXT" ]; then
# 	case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
# elif [ -n "$KSH_VERSION" ]; then
# 	[ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
# elif [ -n "$BASH_VERSION" ]; then
# 	(return 0 2>/dev/null) && sourced=1
# else # All other shells: examine $0 for known shell binary filenames
# 	# Detects `sh` and `dash`; add additional shell filenames as needed.
# 	case ${0##*/} in sh|dash) sourced=1;; esac
# fi
# if [[ $sourced = 1 ]]; then
# 	echo "system/env already sourced exiting..."
# 	return 1
# fi

# Important Functions for dots Setup
# (Don't delete them if you going to use it install.sh later)
get() {
  echo "${!1}"
}
print_platform() {
	echo "  Current Platform"
	echo " —————————————————————————————"
	echo "  OS/Kernel:    $currentos"
	echo "  Version:      $osversion"
	echo "  Architecture: $archbits"
}
is_executable() {
	BIN=$(command -v "$1" 2>/dev/null)
	local BIN
	if [ ! "$BIN" = "" ] && [ -x "$BIN" ]; then true; else false; fi
}
is_supported() {
  if [ $# -eq 1 ]; then
	if eval "$1" > /dev/null 2>&1; then true; else false; fi
  else
	if eval "$1" > /dev/null 2>&1; then
	  echo -n "$2"
	else
	  echo -n "$3"
	fi
  fi
}
prepend_path() {
	[ -d "$1" ] && PATH="$1:$PATH"
}
set_config() {
	local KEY="$1"
	local VALUE="$2"
	local FILE="$3"
	touch "$FILE"
	if grep -q "$1=" "$FILE"; then
		sed "s@$KEY=.*@$KEY=\"$VALUE\"@" -i "$FILE"
	else
		echo "export $KEY=$VALUE" >> "$FILE"
	fi
}
ask() {
	while true; do
		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
			default=N
		else
			prompt="y/n"
			default=
		fi
		read -r -p "$1 [$prompt] " REPLY </dev/tty
		if [ -z "$REPLY" ]; then
			REPLY=$default
		fi
		case "$REPLY" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac
	done
}

# Calculator
calc() {
	echo "$*" | bc -l;
}

function cdup {
	newdir="${PWD/\/$1\/*/}/$1"
	if [[ -d "$newdir" ]]
	then
		cd "$newdir"
	else
		echo "\"$newdir\" does not exist"
	fi
}

function _cdup_complete {
	local word=${COMP_WORDS[COMP_CWORD]}
	local list
	list=$(pwd | cut -c 2- | sed -e 's#/[^/]*$##g' -e 's/\([ ()]\)/\\\\\1/g')
	IFS=/
	list=$(compgen -W "$list" -- "$word")
	IFS=$'\n'
	COMPREPLY=("$list")
	return 0
}

# complete -F _cdup_complete cdup

## EXTRACT FUNCTION ## | Usage: extract <file>
extract () {
  if [ -f "$1" ] ; then
	  case "$1" in
		  *.tar.bz2)   tar xvjf "$1"    ;;
		  *.tar.gz)    tar xvzf "$1"    ;;
		  *.bz2)       bunzip2 "$1"     ;;
		  *.rar)       rar x "$1"       ;;
		  *.gz)        gunzip "$1"      ;;
		  *.tar)       tar xvf "$1"     ;;
		  *.tbz2)      tar xvjf "$1"    ;;
		  *.tgz)       tar xvzf "$1"    ;;
		  *.zip)       unzip "$1"       ;;
		  *.Z)         uncompress "$1"  ;;
		  *.7z)        7z x "$1"        ;;
		  *)           echo "don't know how to extract '$1'..." ;;
	  esac
  else
	  echo "'$1' is not a valid file!"
  fi
}

#netinfo - shows LAN network information for your system (part of ii)
netinfoLAN (){
echo "---------------------------------------------------"
/sbin/ifconfig enp4s0 | awk /'inet/ {print $2}'
/sbin/ifconfig enp4s0 | awk /'bcast/ {print $3}'
/sbin/ifconfig enp4s0 | awk /'inet6 addr/ {print $1,$2,$3}'
/sbin/ifconfig enp4s0 | awk /'HWaddr/ {print $4,$5}'
echo "---------------------------------------------------"
}

# copy | Usage: copy /source/file /destination/file
# copy() {
# 	size=$(stat -c%s $1)
# 	dd if=$1 &> /dev/null | pv -petrb -s $size | dd of=$2
# }

# Run a command x times | Usage: runx <value>
# http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
runx() {
	n=$1
	shift
	while [ $(( n -= 1 )) -ge 0 ]
	do
		"$@"
	done
}

# send link to podbeuter queue | usage podbeuter <podcasturl>
podqueue() {
  echo "$1 \"$HOME/Downloads/$(echo "$1" | awk -F'/' '{ print $NF }')\"" >> ~/.newsboat/queue ;
}

yt() {
  mpv ytdl://ytsearch10:"$1"
}

ytconvert() {
  ffmpeg -i "$1" -c:v libx264 -crf 18 -preset slow -pix_fmt yuv420p -c:a copy "$2.mkv"
}

# this is notes for video: http://www.youtube.com/watch?v=ee4XzWuapsE

#-------- Transmission CLI {{{
#------------------------------------------------------
# lightweight torrent daemon, has option for cli, webui, ncurses, and gui frontend 
# demo video: http://www.youtube.com/watch?v=ee4XzWuapsE
# WebUI:	http://localhost:9091/transmission/web/
# 		http://192.168.1.xxx:9091/transmission/web/
# tsm-clearcompleted() {
# 		transmission-remote -l | grep 100% | grep Done | \
# 		awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r ;}
# tsm() { transmission-remote --list ;}
# 	# numbers of ip being blocked by the blocklist
# 	# credit: smw from irc #transmission
# tsm-count() { echo "Blocklist rules:" $(curl -s --data \
# 	'{"method": "session-get"}' localhost:9091/transmission/rpc -H \
# 	"$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
# 	| cut -d: -f 11 | cut -d, -f1) ;}
# # demo video: http://www.youtube.com/watch?v=TyDX50_dC0M
# tsm-blocklist() { $PATH_SCRIPTS/blocklist.sh ;}		# update blocklist
# tsm-daemon() { transmission-daemon ;}
# tsm-quit() { killall transmission-daemon ;}
# tsm-altspeedenable() { transmission-remote --alt-speed ;}	# limit bandwidth
# tsm-altspeeddisable() {	transmission-remote --no-alt-speed ;}	# dont limit bandwidth
# tsm-add() { transmission-remote --add "$1" ;}
# tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
# tsm-pause() { transmission-remote -t"$1" --stop ;}		# <id> or all
# tsm-start() { transmission-remote -t"$1" --start ;}		# <id> or all
# tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
# tsm-remove() { transmission-remote -t"$1" --remove ;}		# leaves data alone
# tsm-info() { transmission-remote -t"$1" --info ;}
# tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}

# https://github.com/fagga/transmission-remote-cli
# demo video: http://www.youtube.com/watch?v=hLz7ditUwY8
# tsm-ncurse() { transmission-remote-cli ;}
#
#}}}

twitch(){
	RES=480p
	[ "$2" ] && RES="$2"
	MP="mpv"
	URL=https://twitch.tv/"$1"
	xdg-open "$URL/chat" || open "$URL/chat"
	streamlink -p "$MP" "$URL" "$RES"
}

thicc() {
	echo "$1" | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz/卂乃匚刀乇下厶卄工丁长乚从𠘨口尸㔿尺丂丅凵リ山乂丫乙卂乃匚刀乇下厶卄工丁长乚从𠘨口尸㔿尺丂丅凵リ山乂丫乙/'
}

stopwatch(){
    date1=$(date +%s);
    while true; do
    days=$(( $(($(date +%s) - date1)) / 86400 ))
    echo -ne "$days day(s) and $(date -u --date @$(($(date +%s) - $date1)) +%H:%M:%S)\r";
    sleep 0.1
    done
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}
